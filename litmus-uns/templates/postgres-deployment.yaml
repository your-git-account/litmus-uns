{{- if .Values.postgres.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: uns
      component: postgres
  template:
    metadata:
      labels:
        app: uns
        component: postgres
      {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.postgres.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.postgres.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}  
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        fsGroup: {{ .Values.postgres.fsGroup }}
      initContainers:
        - name: set-fs-owner
          image: {{ .Values.images.postgres.name }}:{{ .Values.images.postgres.tag }}
          imagePullPolicy: {{ .Values.images.postgres.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          command: 
            - 'sh'
            - '-c'
            - |
              chown -R {{ .Values.postgres.fsOwner }}:{{ .Values.postgres.fsGroup }} /var/lib/postgresql/data
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres-storage
            subPath: data 
      containers:
      - name: postgres
        image: {{ .Values.images.postgres.name }}:{{ .Values.images.postgres.tag }}
        imagePullPolicy: {{ .Values.images.postgres.pullPolicy }}
        ports:
        - containerPort: 5432
        securityContext:
          {{- with .Values.postgres.securityContext }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10  
        env:
        {{- $creds := printf "%s-creds" .Chart.Name }}
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "POSTGRES_USER"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "POSTGRES_PASSWORD"
        - name: KEYCLOAK_DB
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "KEYCLOAK_DB"
        - name: MQTT_DB
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "MQTT_DB"
        - name: MQTT_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "MQTT_ADMIN_USER"
        - name: MQTT_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "MQTT_ADMIN_PASSWORD"
        - name: MQTT_SCHEMA
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "MQTT_SCHEMA"
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "KEYCLOAK_USER"
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "KEYCLOAK_PASSWORD"
        - name: KEYCLOAK_SCHEMA
          valueFrom:
            secretKeyRef:
              name: {{ $creds }}
              key: "KEYCLOAK_SCHEMA"      
        volumeMounts:
        - mountPath: /docker-entrypoint-initdb.d
          name: init-db-script
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
          subPath: data
        - name: tmpdir
          subPath: "var/run"
          mountPath: "/var/run" 
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-db-script
        configMap:
          name: postgres-init-db-script    
      - name: tmpdir
        emptyDir:
          sizeLimit: "500Mi"        
{{- end }}